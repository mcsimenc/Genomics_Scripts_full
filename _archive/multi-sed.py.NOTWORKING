#!/usr/bin/env python3

import os
import sys
import subprocess
import re


def help():
	print('''
		Usage:
		------------
		multi-sed.py -map <file> -input <file> [options]

		Description:
		------------
		Takes a 2-column tab-delimited file from the -map option performs
		sed substitute calls on the file provided by the -input option. E.g.
		if the -map file contains:

		one	two
		red	blue
		boot	shoe
		cage	zoo

		This script does:

		cat file | sed 's/one/two/'  > tmp1
		cat tmp1 | sed 's/red/blue/'  > tmp2
		cat tmp2 > tmp1
		cat tmp1 | sed 's/boot/shoe/'  > tmp2
		cat tmp2 > tmp1
		cat tmp1 | sed 's/cage/zoo/'  > tmp2
		mv tmp2 input_filename.multi-sed
		rm tmp1
		



		Output:
		------------
		Writes a multi-sed modification of the input file as the same name as
		the input file with a .multi-sed suffix.
		


		Options:
		------------
		-g		Turn the g (global) flag on for the sed calls.

		-padright	Pad right side of pattern with this string. Enter
				pad in double quotes, i.e. -padright "\\t"

		''')

	sys.exit()

args = sys.argv

if '-h' in args or len(args) < 5 or '-map' not in args or '-input' not in args:
	help()

map_flname = args[args.index('-map') + 1]
in_flname = args[args.index('-input') + 1]
padright = args[args.index('-padright') + 1].strip('"')



with open(map_flname) as map_fl:
	map_list = map_fl.read().split('\n')

map_list.pop(map_list.index(""))

if '-g' in args:
	if '-padright' in args:
		sed_calls = [ "sed 's/{0}{3}/{1}/{2}'".format(pair.split()[0], pair.split()[1], 'g', padright) for pair in map_list ]
	else:
		sed_calls = [ "sed 's/{0}/{1}/{2}'".format(pair.split()[0], pair.split()[1], 'g') for pair in map_list ]
else:
	if '-padright' in args:
		sed_calls = [ "sed 's/{0}{2}/{1}/'".format(pair.split()[0], pair.split()[1], padright) for pair in map_list ]
	else:
		sed_calls = [ "sed 's/{0}/{1}/'".format(pair.split()[0], pair.split()[1]) for pair in map_list ]

subprocess.call('cat {0} | {1} > tmp1 '.format(in_flname, sed_calls.pop(0)), shell=True)
for call in sed_calls:
	subprocess.call('cat tmp1 | {0} > tmp2'.format(call, shell=True))
	subprocess.call('cat tmp2 > tmp1')

subprocess.call('mv tmp2 {0}.multi-sed'.format(in_flname), shell=True)
subprocess.call('rm tmp1', shell=True)


#call = 'cat {0} | {1}'.format(in_flname, " | ".join(sed_calls))
